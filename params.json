{"name":"Umbraco-angular","tagline":"Use umbraco as a CMS, without having to use the umbraco frontend. Perfect way to get CMS functionality into legacy/new applications.","body":"***\r\n# umbraco-angular\r\n***\r\n\r\nThe project is all about using umbraco CMS only for content and consuming it from a different site built in what ever technique of choice.\r\nMore than once have I come across the situation where I wan't to (or have to) use a different frontend than the one that comes with umbraco.\r\n\r\nI recently worked on a project that used nopcommerce (http://nopcommerce.com/) as the e-commerce platform. Since nopcommerce is\r\na commerce solution it does not contain any good CMS support and in todays market you have to very dynamic and change all the time so some kind\r\nof CMS is a must! Or else, you are doing it wrong ;)\r\n\r\nBelow you can read about the following. Creating a simple application with angularjs. Setting up the application with the UmbracoAngular provider.\r\n\r\nI have also included the entire UmbracoApiController that I use to extract data from umbraco. I have based my example on a new umbraco 7.0.4 installation\r\nfrom nuget and installed the umbraco txt starter kit.\r\n\r\n* [AngularJS](#angularjs)\r\n* [Umbraco](#umbraco)\r\n* [IE8](#ie8)\r\n\r\n***\r\n\r\n***\r\n### Start\r\n***\r\n<a name=\"angularjs\"></a>\r\n####AngularJS\r\nInclude angular.js and the umbraco-angular.js file (see example html).\r\n\r\nStart by creating your application and injecting the umbraco-angular module (located under src/scripts/umbraco.angular.js) and configuring it.\r\n\r\n/scripts/app/app.js\r\n```javascript\r\nvar app = angular.module(\"app\", ['umbraco.angular']);\r\n\r\napp.config(function (UmbracoAngularProvider) {\r\n    UmbracoAngularProvider.setApiEndpoint(\"http://localhost:PORT/umbraco/api/nodeapi/\");\r\n});\r\n\r\n```\r\n\r\nExample controller.\r\n\r\n/scripts/app/controllers/index.js\r\n```javascript\r\napp.controller(\"indexController\", [\r\n    '$scope', '$sce', 'UmbracoAngular', function($scope, $sce, UmbracoAngular) {\r\n        $scope.view = {};\r\n\r\n        $scope.GetNodeByUrl = function (url) {\r\n            UmbracoAngular.GetNodeByUrl(url).then(function (response) {\r\n                var data = response.data;\r\n\r\n                if (data.StatusMessage.Success) {\r\n                    var property = UmbracoAngular.GetProperty(\"aboutTitle\", data);                \r\n                    var image = UmbracoAngular.GetProperty(\"bannerBackgroundImage\", data);\r\n\r\n                    $scope.view.BodyText = $sce.trustAsHtml(property.Value);\r\n                    $scope.view.Title = data.Name;\r\n                    $scope.view.Image = $sce.trustAsHtml(data.HostName + image.Value);\r\n                } else {\r\n                    $scope.view.BodyText = $sce.trustAsHtml(\"<p>\" + data.StatusMessage.Message + \"</p>\");\r\n                }\r\n            });\r\n        };\r\n    }\r\n]);\r\n```\r\n\r\nExample html.\r\n\r\n/index.html\r\n```html\r\n<!DOCTYPE html>\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n<head>\r\n    <title></title>\r\n</head>\r\n<body ng-app=\"app\">\r\n    <div ng-controller=\"indexController\" ng-init=\"GetNodeByUrl('/')\">\r\n        <h2 ng-bind=\"view.Title\"></h2>\r\n        <div class=\"body\" ng-bind-html=\"view.BodyText\"></div>\r\n        <img src=\"{{view.Image}}\" />\r\n    </div>\r\n\r\n    <!--Angular-->\r\n    <script src=\"Scripts/angular.js\"></script>\r\n\r\n    <!--App-->\r\n    <script src=\"Scripts/app/app.js\"></script>\r\n\r\n    <!--Controllers-->\r\n    <script src=\"Scripts/app/controllers/index.js\"></script>\r\n\r\n    <!--Plugins-->\r\n    <script src=\"Scripts/umbraco.angular.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n<a name=\"umbraco\"></a>\r\n####Umbraco\r\nFor testing, create a new VS solution (I called it UmbracoTest) and download/install the umbraco cms nuget package. Then when the installation is complete install the umbraco txt starter kit\r\nto have something to start with. In my example below I have used that starter kit. I created a folder called services to put my UmbracoApiController in.\r\n\r\nWhen you inherit from UmbracoApiController, the default route is http://site/umbraco/api/{nameofcontoller}/{method}/{param}, ex http://localhost:PORT/umbraco/api/nodeapi/getnodedata/1070\r\n\r\n/Services/NodeApiController.cs\r\n```c#\r\nusing System.Net.Http;\r\nusing System.Text;\r\nusing Newtonsoft.Json;\r\nusing umbraco;\r\nusing umbraco.NodeFactory;\r\nusing Umbraco.Web.WebApi;\r\nusing UmbracoTest.Services.Models;\r\n\r\nnamespace UmbracoTest.Services\r\n{\r\n    [AllowCrossSiteJson]\r\n    public class NodeApiController : UmbracoApiController\r\n    {       \r\n        /// <summary>\r\n        /// Gets the umbraco node by id\r\n        /// </summary>\r\n        public HttpResponseMessage GetNodeData(int id)\r\n        {\r\n            var node = new Node(id);\r\n\r\n            if (node.Id == 0)\r\n                return NodeNotFound();\r\n            \r\n\r\n            var viewNode = ViewNode.Create(node);\r\n\r\n            return JsonResponse(viewNode);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Gets the umbraco node by url, example : /about        \r\n        /// </summary>\r\n        public HttpResponseMessage GetNodeByUrl(string url)\r\n        {\r\n            var node = uQuery.GetNodeByUrl(url);\r\n\r\n            //we don't want the root node, use GetNodeData for that\r\n            if (node.Id == 0 || node.Id == -1)\r\n                return NodeNotFound();\r\n\r\n            var viewNode = ViewNode.Create(node);\r\n\r\n            return JsonResponse(viewNode);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Create response object\r\n        /// </summary>\r\n        private HttpResponseMessage JsonResponse(object obj)\r\n        {\r\n            return new HttpResponseMessage\r\n            {\r\n                Content = JsonContent(obj),                \r\n            };\r\n        }\r\n\r\n        /// <summary>\r\n        /// Serialize object to json\r\n        /// </summary>\r\n        private StringContent JsonContent(object obj)\r\n        {\r\n            return new StringContent(JsonConvert.SerializeObject(obj), Encoding.UTF8, \"application/json\");\r\n        }\r\n\r\n        /// <summary>\r\n        /// Node not found response\r\n        /// </summary>\r\n        private HttpResponseMessage NodeNotFound()\r\n        {\r\n            return JsonResponse(new ViewNode()\r\n            {\r\n                StatusMessage = new StatusMessage { Success = false, Message = \"Node not found\" }\r\n            });\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAlso allow CORS. This need to be modified if you wan't to allow any other hosts than localhost.\r\n/Services/AllowCrossSiteJsonAttribute.cs\r\n```c#\r\nusing System.Web.Http.Filters;\r\n\r\nnamespace UmbracoTest.Services\r\n{\r\n    public class AllowCrossSiteJsonAttribute : ActionFilterAttribute\r\n    {\r\n        public override void OnActionExecuted(HttpActionExecutedContext actionExecutedContext)\r\n        {\r\n            if (actionExecutedContext.Response != null)\r\n            {   \r\n                if(actionExecutedContext.Response.RequestMessage.RequestUri.Host.ToLower() == \"localhost\")\r\n                    actionExecutedContext.Response.Headers.Add(\"Access-Control-Allow-Origin\", \"*\");\r\n            }\r\n\r\n            base.OnActionExecuted(actionExecutedContext);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nOther needed classes.\r\n\r\n/Services/Models/ViewNode.cs\r\n```c#\r\nusing System.Collections.Generic;\r\nusing System.Web;\r\nusing umbraco.interfaces;\r\nusing umbraco.NodeFactory;\r\n\r\nnamespace UmbracoTest.Services.Models\r\n{\r\n    public class ViewNode\r\n    {\r\n        public int TemplateId { get; set; }\r\n        public int Id { get; set; }\r\n        public int Level { get; set; }\r\n        public string Name { get; set; }\r\n        public string NiceUrl { get; set; }\r\n        public IProperty BodyText { get; set; }\r\n        public StatusMessage StatusMessage { get; set; }\r\n        public List<IProperty> Properties { get; set; }\r\n        public string HostName { get; set; }\r\n\r\n        public static ViewNode Create(Node node)\r\n        {            \r\n            return new ViewNode\r\n            {\r\n                NiceUrl = node.NiceUrl,\r\n                TemplateId = node.template,\r\n                Name = node.Name,\r\n                Level = node.Level,\r\n                Id = node.Id,\r\n                Properties = node.PropertiesAsList,\r\n                StatusMessage = new StatusMessage { Success = true },\r\n                HostName = GetHostname()\r\n            };\r\n        }\r\n\r\n        private static string GetHostname()\r\n        {\r\n            if (HttpContext.Current == null)\r\n                return \"\";\r\n\r\n            return HttpContext.Current.Request.Url.Scheme + \"://\" + HttpContext.Current.Request.Url.Authority;\r\n        }\r\n    }    \r\n}\r\n```\r\n\r\n/Services/Models/StatusMessage.cs\r\n```c#\r\nnamespace UmbracoTest.Services.Models\r\n{\r\n    /// <summary>\r\n    /// Object that indicates if the node was found or not.\r\n    /// </summary>\r\n    public class StatusMessage\r\n    {\r\n        public bool Success { get; set; }\r\n        public string Message { get; set; }\r\n    }\r\n}\r\n```\r\n<a name=\"ie8\"></a>\r\n### IE8\r\n\r\n***\r\n\r\n***\r\n### License\r\n***\r\nMIT\r\n***","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}